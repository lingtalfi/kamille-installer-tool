#!/usr/bin/env php
<?php


/**
 * WORKFLOW: REMINDER
 * -----------------------
 * There is a planet conflicts:
 *      planets are in kit, but also in calling app
 *
 * To address this problem, use the following methodologies:
 *
 * - extending the planets in kit
 *
 * - g kit (go to kit)
 * - uni tolink (work with symlinks, so that you can commit your changes from kit)
 * - do your changes to planets, then commit them...
 * - then make them dir again so that the user downloading kit has concrete planets:
 *          - uni todir
 *          - uni clean (remove .git, otherwise no sending)
 * - now you can commit kit
 *      - guu
 *
 *
 *
 */

use ApplicationItemManager\Importer\GithubImporter;


use ApplicationItemManager\LingApplicationItemManager;
use BumbleBee\Autoload\ButineurAutoloader;
use CommandLineInput\ProgramOutputAwareCommandLineInput;
use KamilleProgram\Installer\KamilleModuleInstaller;
use KamilleProgram\Installer\KamilleWidgetInstaller;
use KamilleProgram\Program\KamilleApplicationItemManagerProgram;
use KamilleProgram\Repository\KamilleModulesRepository;
use KamilleProgram\Repository\KamilleWidgetsRepository;
use Output\ProgramOutput;


$appDir = getcwd();


/**
 * The -xx special flag allows me to basically
 * import the modules/widgets directly into the directory I'm in,
 * rather than prefixing with class-modules/ or class-widgets/.
 *
 * To make it work, you need to have the universe installed though.
 * See bigbang.php installer from the universe installer for more information.
 *
 */
$inPlace = false;
foreach ($argv as $arg) {
    if ('-xx' === $arg) {
        $inPlace = true;
    }
}


//--------------------------------------------
// KAMILLE MODULES AND WIDGETS
//--------------------------------------------
/**
 * To install kamille widgets, we need the kaminos environment,
 * which is booted by calling the boot script
 */
$_SERVER['APPLICATION_ENVIRONMENT'] = 'dev'; // choose between dev or prod

if (false === $inPlace) {
    $inPlaceFile = $appDir . "/boot.php";
    if (file_exists($inPlaceFile)) {
        require_once $inPlaceFile;
    } else {
        require __DIR__ . "/class-program/bigbang.php";
    }
} else {
    require __DIR__ . "/class-program/bigbang.php";
}

/**
 *  then we leverage the now existing butineur autoloader to load the classes
 * necessary for THIS script
 */
ButineurAutoloader::getInst()->addLocation(__DIR__ . "/class-program");


$helpFile = __DIR__ . "/class-program/help.txt";
if (false === $inPlace) {
    $modulesImportDir = $appDir . "/class-modules";
    $widgetsImportDir = $appDir . "/class-widgets";
} else {
    $modulesImportDir = $appDir;
    $widgetsImportDir = $appDir;
}


$output = ProgramOutput::create();





$widgetManager = LingApplicationItemManager::create()
    ->setOutput($output)
    ->setInstaller(KamilleWidgetInstaller::create()->setOutput($output)->setApplicationDirectory($appDir))
    ->bindImporter('KamilleWidgets', GithubImporter::create()->setGithubRepoName("KamilleWidgets"))
    ->setFavoriteRepositoryId('KamilleWidgets')
    ->setImportDirectory($widgetsImportDir)
    ->addRepository(KamilleWidgetsRepository::create(), ["kw"]);


$moduleManager = LingApplicationItemManager::create()
    ->setOutput($output)
    ->setInstaller(KamilleModuleInstaller::create()
        ->setWidgetManager($widgetManager)
        ->setOutput($output)->setApplicationDirectory($appDir))
    ->bindImporter('KamilleModules', GithubImporter::create()->setGithubRepoName("KamilleModules"))
    ->setFavoriteRepositoryId('KamilleModules')
    ->setImportDirectory($modulesImportDir)
    ->addRepository(KamilleModulesRepository::create(), ["km"]);


$input = ProgramOutputAwareCommandLineInput::create($argv)
    ->setProgramOutput($output)
    ->setAcceptNotRegistered(true)

//    ->addFlag("f")// force
//    ->addFlag("l")// flash to link instead of dirs
//    ->addFlag("d")// debug: todo: what's that for?
//    ->addFlag("t")// trace, complements debug
//    ->addFlag("v")// verbose, todo: do we really need that?
//    ->addFlag("in-place")
//    ->addOption("e") // environment for newpage command
//    ->addOption("name")
;

KamilleApplicationItemManagerProgram::create()
    ->setCurrentDir($appDir)
    ->setModuleManager($moduleManager)
    ->setWidgetManager($widgetManager)
    ->setHelpFile($helpFile)
    ->setDefaultCommand("help")
    ->setInput($input)
    ->setOutput($output)
    ->setModulesImportDirectory($modulesImportDir)
    ->setWidgetsImportDirectory($widgetsImportDir)
    ->start();

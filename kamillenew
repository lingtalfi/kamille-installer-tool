#!/usr/bin/env php
<?php


namespace {


    use BumbleBee\Autoload\ButineurAutoloader;
    use KamilleNaiveImporter\Importer\KamilleModulesImporter;
    use KamilleNaiveImporter\KamilleNaiveImporter;
    use KamilleNaiveImporter\Log\ProgramLog;


    $appDir = getcwd();


    //--------------------------------------------
    // AUTOLOAD CODE
    //--------------------------------------------
    $_SERVER['APPLICATION_ENVIRONMENT'] = "dev"; // hack environment here depending on your prefs
    $file = $appDir . '/boot.php';
    if (file_exists($file)) {
        require_once $file;
        ButineurAutoloader::getInst()
            ->addLocation(__DIR__ . "/pprivate2");

    }


    try {

        $modulesRelativePath = 'class-modules';

        $force = false;
        if (array_key_exists(2, $argv) && '-f' === $argv[2]) {
            $force = true;
            unset($argv[2]);
            $argv = array_merge($argv);
        }

        //--------------------------------------------
        // IMPORT
        // INSTALL
        // UNINSTALL
        //--------------------------------------------
        if (array_key_exists(1, $argv) &&
            ('import' === $argv[1] || 'install' === $argv[1] || 'uninstall' === $argv[1])
            && array_key_exists(2, $argv)
        ) {


            $command = $argv[1];
            $moduleName = $argv[2];


            $modulesDir = $appDir . "/" . $modulesRelativePath;
            if (false === file_exists($modulesDir)) {
                @mkdir($modulesDir, 0777, true);
            }

            if (file_exists($modulesDir)) {

                $summary = null;
                $kamille = KamilleNaiveImporter::create()
                    ->addImporter(KamilleModulesImporter::create()->setAliases(['km']));


                if ('import' === $command) {
                    $kamille->import($moduleName, $force);
                } elseif ('install' === $command) {
                    $kamille->install($moduleName, $force);
                } elseif ('uninstall' === $command) {
                    $kamille->install($moduleName);
                }
            } else {
                ProgramLog::error("Cannot create the modules directory: $modulesDir");
            }
        }
        //--------------------------------------------
        // LIST
        //--------------------------------------------
        elseif (array_key_exists(1, $argv) && 'list' === $argv[1]) {
            $importerId = null;
            if (array_key_exists(2, $argv)) {
                $importerId = $argv[2];
            }
            KamilleNaiveImporter::create()
                ->setAppDir($appDir)
                ->setProgramPrinter($printer)
                ->addImporter(KamilleWidgetsKamilleImporter::create())
                ->listAvailableModules($importerId);

        } elseif (array_key_exists(1, $argv) && 'listimported' === $argv[1]) {
            KamilleNaiveImporter::create()
                ->setAppDir($appDir)
                ->setProgramPrinter($printer)
                ->addImporter(KamilleWidgetsKamilleImporter::create())
                ->listImportedModules();

        } elseif (array_key_exists(1, $argv) && 'listinstalled' === $argv[1]) {
            KamilleNaiveImporter::create()
                ->setAppDir($appDir)
                ->setProgramPrinter($printer)
                ->addImporter(KamilleWidgetsKamilleImporter::create())
                ->listInstalledModules();

        }
        //--------------------------------------------
        // SET/GET MODULES DIRECTORY RELATIVE PATH
        //--------------------------------------------
        elseif (array_key_exists(1, $argv) && 'setmodulesrelpath' === $argv[1] && array_key_exists(2, $argv)) {
            $path = $argv[2];
            if (true === ProgramStorage::create()->setModulesDirRelativePath($path)) {
                $printer->success("modules directory relative path successfully set");
            } else {
                $printer->error("modules directory relative path couldn't be set");
            }

        } elseif (array_key_exists(1, $argv) && 'getmodulesrelpath' === $argv[1]) {
            if (false !== ($path = ProgramStorage::create()->getModulesDirRelativePath())) {
                $printer->say($path);
            } else {
                $printer->error("modules directory relative path couldn't be retrieved. Please use the setmodulesrelpath command first");
            }

        }
        //--------------------------------------------
        // CLEAN
        //--------------------------------------------
        elseif (array_key_exists(1, $argv) &&
            (
                'clean' === $argv[1] ||
                'cleanr' === $argv[1]
            )
        ) {


            $recursive = ('cleanr' === $argv[1]);

            $appDir = getcwd();
            $modulesDir = $appDir . "/" . $modulesRelativePath;

            if (is_dir($modulesDir)) {
                CleanerTool::create()->setPrinter($printer)->clean($modulesDir, $recursive);
                $printer->success('The following directory has been successfully cleaned: ' . $modulesDir . '');
            } else {
                $printer->error("The application modules directory doesn't exist. Please create it first, then re-execute this command. Expected path: $modulesDir");
            }
        }
        else {
            $printer->say("");
            $printer->error("Invalid arguments");
            $printer->help();
        }

    } catch (UserErrorException $e) {
        $printer->error($e->getMessage());
    }
}



